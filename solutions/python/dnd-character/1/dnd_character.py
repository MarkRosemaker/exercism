import random

DICE_MIN: int = 1
DICE_MAX: int = 6

NUM_DICE_TO_ROLL: int = 4
NUM_DICE_TO_SELECT: int = 3

INITIAL_HITPOINTS: int = 10


class Character:
    """
    Represents a Dungeons & Dragons character with six abilities and hitpoints.
    Abilities are generated by rolling four 6-sided dice and summing the highest three.
    Hitpoints are calculated as 10 plus the constitution modifier.
    """

    def __init__(self) -> None:
        """
        Initializes a character by randomly generating six ability scores
        (strength, dexterity, constitution, intelligence, wisdom, charisma)
        and calculating hitpoints as 10 + constitution modifier.
        """
        # Generate ability scores for each attribute
        self.strength = roll_ability_score()
        self.dexterity = roll_ability_score()
        self.constitution = roll_ability_score()
        self.intelligence = roll_ability_score()
        self.wisdom = roll_ability_score()
        self.charisma = roll_ability_score()

        # Calculate hitpoints using constitution modifier
        self.hitpoints: int = INITIAL_HITPOINTS + modifier(self.constitution)

    def ability(self) -> int:
        """
        Returns a random ability score from the character's six abilities.
        """
        return random.choice(
            [
                self.strength,
                self.dexterity,
                self.constitution,
                self.intelligence,
                self.wisdom,
                self.charisma,
            ]
        )


def roll_ability_score() -> int:
    """
    Rolls four 6-sided dice and returns the sum of the highest three.
    Used to generate a single ability score for a character.
    """
    # Sort the dice rolls and sum the highest three values
    return sum(
        sorted([random.randint(DICE_MIN, DICE_MAX) for _ in range(NUM_DICE_TO_ROLL)])[
            -NUM_DICE_TO_SELECT:  # Select the highest three dice rolls
        ]
    )


def modifier(score: int) -> int:
    """
    Calculates the ability modifier for a given ability score.
    """
    return (score - 10) // 2
